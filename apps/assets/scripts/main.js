// Generated by CoffeeScript 1.12.7
(function() {
  var APIManager, BaseObject, MarkOn, WVNC, require,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.classes = {};

  window.libraries = {};

  window.myuri = "/";

  window.mobilecheck = function() {
    if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {
      return true;
    }
    return false;
  };

  window.makeclass = function(n, o) {
    return window.classes[n] = o;
  };


  /* 
  window.require = (lib) ->
      return new Promise (r, e) ->
          return r() if window.libraries[lib]
          $.getScript window.myuri + lib
              .done (d) ->
                  window.libraries[lib] = true
                  r()
              .fail (m, s) ->
                  e(m, s)
   */

  require = function(lib) {
    return new Promise(function(r, e) {
      if (window.libraries[lib]) {
        return r();
      }
      return $.getScript(window.myuri + lib).done(function(d) {
        window.libraries[lib] = true;
        return r();
      }).fail(function(m, s) {
        return e(m, s);
      });
    });
  };

  BaseObject = (function() {
    function BaseObject(name) {
      this.name = name;
    }

    BaseObject.prototype.ready = function() {
      var me;
      me = this;
      return new Promise(function(r, e) {
        return me.resolveDep().then(function() {
          return r();
        })["catch"](function(m, s) {
          return e(m, s);
        });
      });
    };

    BaseObject.prototype.resolveDep = function() {
      var me;
      me = this;
      return new Promise(function(r, e) {
        var dep, fn;
        dep = window.classes[me.name].dependencies;
        if (!dep) {
          r();
        }
        fn = function(l, i) {
          if (i >= dep.length) {
            return r();
          }
          return require(l[i]).then(function() {
            return fn(l, i + 1);
          })["catch"](function(m, s) {
            return e(m, s);
          });
        };
        return fn(dep, 0);
      });
    };

    return BaseObject;

  })();

  makeclass("BaseObject", BaseObject);

  APIManager = (function(superClass) {
    extend(APIManager, superClass);

    function APIManager(args) {
      this.args = args;
      APIManager.__super__.constructor.call(this, "APIManager");
    }

    APIManager.prototype.init = function() {
      var cname, me;
      me = this;
      if (!(this.args && this.args.length > 0)) {
        return console.error("No class found");
      }
      cname = (this.args.splice(0, 1))[0].trim();
      return this.ready().then(function() {
        if (mobilecheck()) {
          mobileConsole.init();
        }
        if (!cname || cname === "") {
          return;
        }
        if (!window.classes[cname]) {
          return console.error("Cannot find class ", cname);
        }
        return (new window.classes[cname](me.args)).init();
      })["catch"](function(m, s) {
        return console.error(m, s);
      });
    };

    return APIManager;

  })(window.classes.BaseObject);

  APIManager.dependencies = ["/assets/scripts/mobile_console.js"];

  makeclass("APIManager", APIManager);

  MarkOn = (function(superClass) {
    extend(MarkOn, superClass);

    function MarkOn() {
      MarkOn.__super__.constructor.call(this, "MarkOn");
    }

    MarkOn.prototype.init = function() {
      var me;
      me = this;
      return this.ready().then(function() {
        return me.editor = new SimpleMDE({
          element: $("#editor")[0]
        });
      })["catch"](function(m, s) {
        return console.error(m, s);
      });
    };

    return MarkOn;

  })(window.classes.BaseObject);

  MarkOn.dependencies = ["/rst/gscripts/mde/simplemde.min.js"];

  makeclass("MarkOn", MarkOn);

  WVNC = (function(superClass) {
    extend(WVNC, superClass);

    function WVNC(args) {
      this.args = args;
      WVNC.__super__.constructor.call(this, "WVNC");
      this.socket = void 0;
      this.uri = void 0;
      if (this.args && this.args.length > 0) {
        this.uri = this.args[0];
      }
    }

    WVNC.prototype.init = function() {
      var me;
      me = this;
      return this.ready().then(function() {
        return me.openSession();
      })["catch"](function(m, s) {
        return console.error(m, s);
      });
    };

    WVNC.prototype.openSession = function() {
      var me;
      me = this;
      $("#stop").click(function(e) {
        if (me.socket) {
          return me.socket.close();
        }
      });
      if (this.socket) {
        this.socket.close();
      }
      if (!this.uri) {
        return;
      }
      this.socket = new WebSocket(this.uri);
      this.socket.binaryType = "arraybuffer";
      this.socket.onopen = function() {
        console.log("socket opened");
        return me.initConnection();
      };
      this.socket.onmessage = function(e) {
        return me.consume(e);
      };
      return this.socket.onclose = function() {
        me.socket = null;
        return console.log("socket closed");
      };
    };

    WVNC.prototype.initConnection = function() {
      var vncserver;
      vncserver = "mrsang.local";
      return this.socket.send(this.buildCommand(0x01, vncserver));
    };

    WVNC.prototype.buildCommand = function(hex, o) {
      var cmd, data;
      data = void 0;
      switch (typeof o) {
        case 'string':
          data = (new TextEncoder()).encode(o);
          break;
        default:
          data = o;
      }
      cmd = new Uint8Array(data.length + 3);
      cmd[0] = hex;
      cmd[2] = data.length >> 8;
      cmd[1] = data.length & 0x0F;
      cmd.set(data, 3);
      console.log("the command is", cmd.buffer);
      return cmd.buffer;
    };

    WVNC.prototype.consume = function(e) {
      var arr, cmd, data, dec, depth, h, pass, pixels, user, w, x, y;
      data = new Uint8Array(e.data);
      cmd = data[0];
      switch (cmd) {
        case 0xFE:
          data = data.subarray(1, data.length - 1);
          dec = new TextDecoder("utf-8");
          return console.log("Error", dec.decode(data));
        case 0x82:
          console.log("Request for login");
          user = "mrsang";
          pass = "!x$@n9";
          arr = new Uint8Array(user.length + pass.length + 1);
          arr.set((new TextEncoder()).encode(user), 0);
          arr.set(['\0'], user.length);
          arr.set((new TextEncoder()).encode(pass), user.length + 1);
          return this.socket.send(this.buildCommand(0x03, arr));
        case 0x83:
          console.log("resize");
          w = data[1] | (data[2] << 8);
          h = data[3] | (data[4] << 8);
          depth = data[5];
          return console.log(w, h, depth);
        case 0x84:
          console.log("update");
          x = data[1] | (data[2] << 8);
          y = data[3] | (data[4] << 8);
          w = data[5] | (data[6] << 8);
          h = data[7] | (data[8] << 8);
          pixels = data.subarray(9, data.length - 1);
          return console.log(x, y, w, h, pixels.length);
        default:
          return console.log(cmd);
      }
    };

    return WVNC;

  })(window.classes.BaseObject);

  WVNC.dependencies = [];

  makeclass("WVNC", WVNC);

}).call(this);
