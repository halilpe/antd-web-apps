// Generated by CoffeeScript 1.12.7
(function() {
  var APIManager, BaseObject, MarkOn, WVNC, require,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.classes = {};

  window.libraries = {};

  window.myuri = "/";

  window.mobilecheck = function() {
    if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)) {
      return true;
    }
    return false;
  };

  window.makeclass = function(n, o) {
    return window.classes[n] = o;
  };


  /* 
  window.require = (lib) ->
      return new Promise (r, e) ->
          return r() if window.libraries[lib]
          $.getScript window.myuri + lib
              .done (d) ->
                  window.libraries[lib] = true
                  r()
              .fail (m, s) ->
                  e(m, s)
   */

  require = function(lib) {
    return new Promise(function(r, e) {
      if (window.libraries[lib]) {
        return r();
      }
      return $.getScript(window.myuri + lib).done(function(d) {
        window.libraries[lib] = true;
        return r();
      }).fail(function(m, s) {
        return e(m, s);
      });
    });
  };

  BaseObject = (function() {
    function BaseObject(name) {
      this.name = name;
    }

    BaseObject.prototype.ready = function() {
      var me;
      me = this;
      return new Promise(function(r, e) {
        return me.resolveDep().then(function() {
          return r();
        })["catch"](function(m, s) {
          return e(m, s);
        });
      });
    };

    BaseObject.prototype.resolveDep = function() {
      var me;
      me = this;
      return new Promise(function(r, e) {
        var dep, fn;
        dep = window.classes[me.name].dependencies;
        if (!dep) {
          r();
        }
        fn = function(l, i) {
          if (i >= dep.length) {
            return r();
          }
          return require(l[i]).then(function() {
            return fn(l, i + 1);
          })["catch"](function(m, s) {
            return e(m, s);
          });
        };
        return fn(dep, 0);
      });
    };

    return BaseObject;

  })();

  makeclass("BaseObject", BaseObject);

  APIManager = (function(superClass) {
    extend(APIManager, superClass);

    function APIManager(args) {
      this.args = args;
      APIManager.__super__.constructor.call(this, "APIManager");
    }

    APIManager.prototype.init = function() {
      var cname, me;
      me = this;
      if (!(this.args && this.args.length > 0)) {
        return console.error("No class found");
      }
      cname = (this.args.splice(0, 1))[0].trim();
      return this.ready().then(function() {
        if (mobilecheck()) {
          mobileConsole.init();
        }
        if (!cname || cname === "") {
          return;
        }
        if (!window.classes[cname]) {
          return console.error("Cannot find class ", cname);
        }
        return (new window.classes[cname](me.args)).init();
      })["catch"](function(m, s) {
        return console.error(m, s);
      });
    };

    return APIManager;

  })(window.classes.BaseObject);

  APIManager.dependencies = ["/assets/scripts/mobile_console.js"];

  makeclass("APIManager", APIManager);

  MarkOn = (function(superClass) {
    extend(MarkOn, superClass);

    function MarkOn() {
      MarkOn.__super__.constructor.call(this, "MarkOn");
    }

    MarkOn.prototype.init = function() {
      var me;
      me = this;
      return this.ready().then(function() {
        return me.editor = new SimpleMDE({
          element: $("#editor")[0]
        });
      })["catch"](function(m, s) {
        return console.error(m, s);
      });
    };

    return MarkOn;

  })(window.classes.BaseObject);

  MarkOn.dependencies = ["/rst/gscripts/mde/simplemde.min.js"];

  makeclass("MarkOn", MarkOn);

  WVNC = (function(superClass) {
    extend(WVNC, superClass);

    function WVNC(args) {
      this.args = args;
      WVNC.__super__.constructor.call(this, "WVNC");
      this.socket = void 0;
      this.uri = void 0;
      if (this.args && this.args.length > 0) {
        this.uri = this.args[0];
      }
      this.canvas = void 0;
      if (this.args && this.args.length > 1) {
        this.canvas = ($(this.args[1]))[0];
      }
      this.buffer = $("<canvas>")[0];
      this.counter = 0;
    }

    WVNC.prototype.init = function() {
      var me;
      me = this;
      return this.ready().then(function() {
        $("#stop").click(function(e) {
          if (me.socket) {
            return me.socket.close();
          }
        });
        $("#connect").click(function(e) {
          me.counter = 0;
          return me.openSession();
        });
        ($(me.canvas)).css("cursor", "none");
        return ($(me.canvas)).mousemove(function(e) {
          var rect, x, y;
          rect = me.canvas.getBoundingClientRect();
          x = Math.floor(e.clientX - rect.left);
          y = Math.floor(e.clientY - rect.top);
          return me.sendPointEvent(x, y, 0);
        });
      })["catch"](function(m, s) {
        return console.error(m, s);
      });
    };

    WVNC.prototype.initCanvas = function(w, h, d) {
      var ctx, data, me;
      me = this;
      this.depth = d;
      this.buffer.width = w;
      this.buffer.height = h;
      ctx = this.buffer.getContext('2d');
      data = ctx.createImageData(w, h);
      ctx.putImageData(data, 0, 0);
      return this.draw();
    };

    WVNC.prototype.updateCanvas = function(x, y, w, h, pixels) {
      var ctx, imgData;
      ctx = this.buffer.getContext('2d');
      ctx.globalAlpha = 1.0;
      imgData = ctx.createImageData(w, h);
      imgData.data.set(this.getCanvasImageData(pixels, w, h));
      ctx.putImageData(imgData, x, y);
      this.counter = this.counter + 1;
      if (this.counter > 50) {
        this.draw();
        return this.couter = 0;
      }
    };

    WVNC.prototype.getCanvasImageData = function(pixels, w, h) {
      var data, i, j, k, npixels, p, pixel, ref, ref1, step, value;
      if (this.depth === 32) {
        return pixels;
      }
      step = this.depth / 8;
      npixels = pixels.length / step;
      data = new Uint8ClampedArray(w * h * 4);
      for (i = k = 0, ref = npixels - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        value = 0;
        for (j = p = 0, ref1 = step - 1; 0 <= ref1 ? p <= ref1 : p >= ref1; j = 0 <= ref1 ? ++p : --p) {
          value = value | pixels[i * step + j] << (j * 8);
        }
        pixel = this.pixelValue(value);
        data[i * 4] = pixel.r;
        data[i * 4 + 1] = pixel.g;
        data[i * 4 + 2] = pixel.b;
        data[i * 4 + 3] = pixel.a;
      }
      return data;
    };

    WVNC.prototype.draw = function() {
      var ctx, h, scale, w;
      if (!this.socket) {
        return;
      }
      scale = 1.0;
      w = this.buffer.width * scale;
      h = this.buffer.height * scale;
      this.canvas.width = w;
      this.canvas.height = h;
      ctx = this.canvas.getContext("2d");
      ctx.save();
      ctx.scale(scale, scale);
      ctx.clearRect(0, 0, w, h);
      ctx.drawImage(this.buffer, 0, 0);
      return ctx.restore();
    };

    WVNC.prototype.pixelValue = function(value) {
      var pixel;
      pixel = {
        r: 255,
        g: 255,
        b: 255,
        a: 255
      };
      if (this.depth === 24 || this.depth === 32) {
        pixel.r = value & 0xFF;
        pixel.g = (value >> 8) & 0xFF;
        pixel.b = (value >> 16) & 0xFF;
      } else if (this.depth === 16) {
        pixel.r = (value & 0x1F) * (255 / 31);
        pixel.g = ((value >> 5) & 0x3F) * (255 / 63);
        pixel.b = ((value >> 11) & 0x1F) * (255 / 31);
      }
      return pixel;
    };

    WVNC.prototype.openSession = function() {
      var me;
      me = this;
      if (this.socket) {
        this.socket.close();
      }
      if (!this.uri) {
        return;
      }
      this.socket = new WebSocket(this.uri);
      this.socket.binaryType = "arraybuffer";
      this.socket.onopen = function() {
        console.log("socket opened");
        return me.initConnection();
      };
      this.socket.onmessage = function(e) {
        return me.consume(e);
      };
      return this.socket.onclose = function() {
        me.socket = null;
        return console.log("socket closed");
      };
    };

    WVNC.prototype.initConnection = function() {
      var vncserver;
      vncserver = "192.168.1.8:5900";
      return this.socket.send(this.buildCommand(0x01, vncserver));
    };

    WVNC.prototype.sendPointEvent = function(x, y, mask) {
      var data;
      if (!this.socket) {
        return;
      }
      data = new Uint8Array(5);
      data[0] = x & 0xFF;
      data[1] = x >> 8;
      data[2] = y & 0xFF;
      data[3] = y >> 8;
      data[4] = 0;
      return this.socket.send(this.buildCommand(0x05, data));
    };

    WVNC.prototype.buildCommand = function(hex, o) {
      var cmd, data;
      data = void 0;
      switch (typeof o) {
        case 'string':
          data = (new TextEncoder()).encode(o);
          break;
        case 'number':
          data = new Uint8Array([o]);
          break;
        default:
          data = o;
      }
      cmd = new Uint8Array(data.length + 3);
      cmd[0] = hex;
      cmd[2] = data.length >> 8;
      cmd[1] = data.length & 0x0F;
      cmd.set(data, 3);
      return cmd.buffer;
    };

    WVNC.prototype.consume = function(e) {
      var arr, cmd, data, dec, depth, h, pass, pixels, user, w, x, y, zlib;
      data = new Uint8Array(e.data);
      cmd = data[0];
      switch (cmd) {
        case 0xFE:
          data = data.subarray(1, data.length - 1);
          dec = new TextDecoder("utf-8");
          return console.log("Error", dec.decode(data));
        case 0x81:
          console.log("Request for password");
          pass = "sang";
          return this.socket.send(this.buildCommand(0x02, pass));
        case 0x82:
          console.log("Request for login");
          user = "mrsang";
          pass = "!x$@n9";
          arr = new Uint8Array(user.length + pass.length + 1);
          arr.set((new TextEncoder()).encode(user), 0);
          arr.set(['\0'], user.length);
          arr.set((new TextEncoder()).encode(pass), user.length + 1);
          return this.socket.send(this.buildCommand(0x03, arr));
        case 0x83:
          console.log("resize");
          w = data[1] | (data[2] << 8);
          h = data[3] | (data[4] << 8);
          depth = data[5];
          this.initCanvas(w, h, depth);
          return this.socket.send(this.buildCommand(0x04, 1));
        case 0x84:
          x = data[1] | (data[2] << 8);
          y = data[3] | (data[4] << 8);
          w = data[5] | (data[6] << 8);
          h = data[7] | (data[8] << 8);
          zlib = data[9];
          pixels = data.subarray(10);
          if (zlib === 1) {
            pixels = pako.inflate(pixels);
          }
          return this.updateCanvas(x, y, w, h, pixels);
        default:
          return console.log(cmd);
      }
    };

    return WVNC;

  })(window.classes.BaseObject);

  WVNC.dependencies = ["/assets/scripts/pako.min.js"];

  makeclass("WVNC", WVNC);

}).call(this);
